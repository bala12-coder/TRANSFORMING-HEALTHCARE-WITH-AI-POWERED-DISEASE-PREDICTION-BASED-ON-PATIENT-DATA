# -*- coding: utf-8 -*-
"""code section.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14uo8mx60Ss1JYdEcw35NHZsa-x2v5aOU
"""

# Step 1: Install dependencies
!pip install scikit-learn pandas

# Step 2: Import libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import joblib
from google.colab import files

# Step 3: Load dataset and train model
url = 'https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv'
columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',
           'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']
df = pd.read_csv(url, names=columns)

X = df.drop('Outcome', axis=1)
y = df['Outcome']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = RandomForestClassifier()
model.fit(X_train, y_train)
model = RandomForestClassifier()
model.fit(X_train, y_train)

# Step 4: Evaluate model
accuracy = accuracy_score(y_test, model.predict(X_test))
print(f"Model Accuracy: {accuracy * 100:.2f}%")

# Step 5: Save model
joblib.dump(model, 'diabetes_model.pkl')

# Step 6: Upload user CSV file
print("\nPlease upload a CSV file with the following columns:\n")
print(columns[:-1])  # Show required columns (excluding 'Outcome')
uploaded = files.upload()

# Step 7: Load uploaded file
for filename in uploaded.keys():
    user_df = pd.read_csv(filename)
    print(f"\nUploaded Data Preview:\n{user_df.head()}")

# Step 8: Load model and predict
model = joblib.load('diabetes_model.pkl')
# Select only the features used during training for prediction
predictions = model.predict(user_df[X_train.columns])

# Step 9: Show results
user_df['DiabetesPrediction'] = ['Likely Diabetic' if p == 1 else 'Unlikely Diabetic' for p in predictions]
print("\nPrediction Results:\n")
print(user_df[['DiabetesPrediction']])

# Optional: Download results
user_df.to_csv("prediction_results.csv", index=False)
files.download("prediction_results.csv")